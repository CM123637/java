public class TreeDemo {
    static class TreeNode {
        public int val;
        public TreeNode left;
        public TreeNode right;

        public TreeNode(int val) {
            this.val = val;
        }
    }

    private List<List<Integer>> result = new ArrayList<>();
    public List<List<Integer>> levelOrder(TreeNode root) {
        if (root == null) {
            return result;
        }
        // 正常二叉树的层数是从 1 开始计算的.
        // 此处为了和下标对应方便, 就直接从 0 开始算
        helper(root, 0);
        return result;
    }

    // 辅助完成递归遍历的过程
    private void helper(TreeNode root, int level) {
        if (level == result.size()) {
            // 达到的第 level 层还没有对应的数组, 此时就需要
            // 创建一个新的数组加入到 result 中
            result.add(new ArrayList<>());
        }
        result.get(level).add(root.val);
        if (root.left != null) {
            helper(root.left, level + 1);
        }
        if (root.right != null) {
            helper(root.right, level + 1);
        }
      }
    }
